import os
import json
import asyncio
import nest_asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import google.generativeai as genai
import gspread
from google.oauth2.service_account import Credentials

# Permite rodar asyncio dentro do Flask (mantido, mas a estrutura de inicializa√ß√£o foi ajustada)
nest_asyncio.apply()

# Inicializa Flask
app_flask = Flask(__name__)

# Vari√°vel global para a aplica√ß√£o do Telegram (definida durante a inicializa√ß√£o)
app_telegram = None 

# ======== VERIFICA√á√ÉO DE VARI√ÅVEIS =========
print("üîç Verificando vari√°veis de ambiente...")

TELEGRAM_TOKEN = os.getenv("TOKEN_TELEGRAM")
# O erro 500 pode ocorrer se o token n√£o estiver dispon√≠vel na rota do webhook
if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TOKEN_TELEGRAM ausente ou n√£o dispon√≠vel. Verifique as vari√°veis de ambiente do Render!")

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise RuntimeError("‚ùå GEMINI_API_KEY ausente!")

GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS")
if not GOOGLE_CREDENTIALS_JSON:
    raise RuntimeError("‚ùå GOOGLE_CREDENTIALS ausente!")

# ======== CONEX√ÉO COM GOOGLE ========
try:
    google_creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
    creds = Credentials.from_service_account_info(
        google_creds_dict,
        scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/calendar"]
    )
    gspread_client = gspread.authorize(creds)
    print("‚úÖ Conectado ao Google (Planilhas + Calend√°rio)")
except Exception as e:
    # Se a conex√£o falhar, o bot n√£o deve travar completamente, mas √© bom logar.
    print(f"‚ùå Erro ao conectar ao Google: {e}")

# ======== CONFIGURAR GEMINI ========
try:
    genai.configure(api_key=GEMINI_API_KEY)
    modelo = genai.GenerativeModel("gemini-1.5-flash")
    print("‚úÖ Gemini configurado com sucesso.")
except Exception as e:
    print(f"‚ùå Erro ao configurar Gemini: {e}")
    # Se a API do Gemini falhar, o bot n√£o deve travar
    modelo = None 


# ======== FUN√á√ÉO DE RESPOSTA ========
async def responder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not modelo:
        await update.message.reply_text("‚ùå O servi√ßo de IA (Gemini) n√£o est√° configurado. Verifique a chave API.")
        return
        
    try:
        texto_usuario = update.message.text
        print(f"üì© Mensagem recebida do Telegram: {texto_usuario}")

        await update.message.reply_text("üí≠ Processando sua solicita√ß√£o, um momento...")

        # Gera resposta com Gemini em thread separada
        resposta = await asyncio.to_thread(modelo.generate_content, texto_usuario)

        if resposta and hasattr(resposta, "text"):
            texto_resposta = resposta.text
            print(f"ü§ñ Resposta gerada pelo Gemini: {texto_resposta}")
            await update.message.reply_text(texto_resposta)
        else:
            print("‚ö†Ô∏è Nenhum texto retornado pelo Gemini.")
            await update.message.reply_text("‚ö†Ô∏è N√£o consegui gerar uma resposta no momento.")
    except Exception as e:
        print(f"‚ùå Erro ao responder: {e}")
        await update.message.reply_text("‚ùå Ocorreu um erro ao processar sua mensagem.")

# ======== FLASK (WEBHOOK) ========
@app_flask.route("/", methods=["GET"])
def home():
    return "ü§ñ Bot do Telegram est√° ativo no Render!"

@app_flask.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    # A verifica√ß√£o do app_telegram √© crucial aqui.
    if not app_telegram:
        print("‚ùå Webhook chamado antes do app_telegram estar pronto.")
        return "Servidor em inicializa√ß√£o", 503 # Retorno 503 - Service Unavailable

    try:
        data = request.get_json()
        if not data:
            print("‚ö†Ô∏è Nenhum dado recebido no webhook.")
            return "Sem conte√∫do", 400

        # Converte JSON em objeto Update (Agora app_telegram est√° garantido)
        update = Update.de_json(data, app_telegram.bot)

        # Executa processamento ass√≠ncrono de forma segura
        loop = asyncio.get_event_loop()
        loop.create_task(app_telegram.process_update(update))

        return "OK", 200
    except Exception as e:
        # Se houver erro, loga e retorna 500, como antes.
        print(f"‚ùå Erro no webhook: {e}")
        return "Erro interno", 500

# ======== INICIALIZA√á√ÉO DO BOT (Ass√≠ncrona) ========
async def iniciar_bot():
    print("üöÄ Inicializando bot...")
    global app_telegram
    
    # Cria a aplica√ß√£o do Telegram
    app_telegram = Application.builder().token(TELEGRAM_TOKEN).build()

    # Adiciona handlers
    app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, responder))
    print("‚úÖ Bot configurado e aguardando mensagens...")

    # Define o webhook
    # Render usa RENDER_EXTERNAL_HOSTNAME para o dom√≠nio
    # Usamos os.getenv('PORT') para garantir a porta correta
    url_webhook = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook/{TELEGRAM_TOKEN}"
    await app_telegram.bot.set_webhook(url=url_webhook)
    print(f"üåê Webhook configurado em: {url_webhook}")
    
    return True # Sinaliza sucesso na inicializa√ß√£o

# ======== IN√çCIO DO SERVIDOR (S√≠ncrono e Corrigido) ========
if __name__ == "__main__":
    
    # CORRE√á√ÉO CR√çTICA: Roda a inicializa√ß√£o do bot (ass√≠ncrona) de forma S√çNCRONA
    # para garantir que app_telegram seja definido antes do Flask rodar.
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(iniciar_bot())
        print("‚úÖ Inicializa√ß√£o ass√≠ncrona do bot conclu√≠da.")
    except Exception as e:
        print(f"‚ùå Falha cr√≠tica na inicializa√ß√£o do bot: {e}")
        exit(1) # Sai com erro se a inicializa√ß√£o falhar
        
    # CORRE√á√ÉO DA PORTA: Usa a vari√°vel de ambiente $PORT injetada pelo Render.
    PORT = int(os.environ.get("PORT", 8080)) # Padr√£o para 8080 se n√£o encontrar (seguran√ßa)
    
    print(f"üåç Servidor Flask iniciando na porta {PORT}...")
    app_flask.run(host="0.0.0.0", port=PORT)
