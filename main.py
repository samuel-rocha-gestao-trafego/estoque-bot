import os
import asyncio
import logging
import google.generativeai as genai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from gspread import authorize
from google.oauth2.service_account import Credentials
import json

# ========== LOGGING ==========
logging.basicConfig(level=logging.INFO, format="%(message)s")

print("üîç Verificando vari√°veis de ambiente...")

# ====== VARI√ÅVEIS DO AMBIENTE ======
TOKEN_TELEGRAM = os.getenv("TOKEN_TELEGRAM")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS")

# ====== FALLBACK SE O TOKEN N√ÉO VIER ======
if not TOKEN_TELEGRAM:
    TOKEN_TELEGRAM = "8444243438:AAFAF_3ZLuWfFBghiP1gI4Vm54sQChO6nfs"
    print("‚ö†Ô∏è TOKEN_TELEGRAM n√£o foi encontrado no ambiente! Usando fallback local (para teste).")
else:
    print("‚úÖ TOKEN_TELEGRAM encontrado com sucesso.")

# ====== VERIFICA√á√ÉO DAS OUTRAS VARI√ÅVEIS ======
if GEMINI_API_KEY:
    print("‚úÖ GEMINI_API_KEY carregado.")
else:
    print("‚ùå GEMINI_API_KEY n√£o encontrado!")

if GOOGLE_CREDENTIALS_JSON:
    print("‚úÖ GOOGLE_CREDENTIALS carregado (conte√∫do omitido por seguran√ßa).")
else:
    print("‚ùå GOOGLE_CREDENTIALS n√£o encontrado!")

# ====== CONEX√ÉO GOOGLE ======
try:
    creds_json = json.loads(GOOGLE_CREDENTIALS_JSON)
    creds = Credentials.from_service_account_info(creds_json, scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/calendar"])
    gc = authorize(creds)
    print("‚úÖ Conectado ao Google (Planilhas + Calend√°rio)")
except Exception as e:
    print("‚ùå Falha ao conectar com o Google:", e)

# ====== CONEX√ÉO GEMINI ======
try:
    genai.configure(api_key=GEMINI_API_KEY)
    print("‚úÖ Gemini configurado com sucesso.")
except Exception as e:
    print("‚ùå Erro ao configurar Gemini:", e)

# ====== COMANDO /start ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ Bot ativo e funcionando no Render!")

# ====== FUN√á√ÉO PRINCIPAL ======
async def main():
    print("üöÄ Inicializando bot...")
    try:
        app = ApplicationBuilder().token(TOKEN_TELEGRAM).build()
        app.add_handler(CommandHandler("start", start))
        print("‚úÖ Bot inicializado com sucesso! Aguardando mensagens...")
        await app.run_polling()
    except Exception as e:
        print(f"‚ùå Erro ao iniciar o bot: {e}")

if __name__ == "__main__":
    asyncio.run(main())
