import os
import json
import asyncio
# REMOVIDO: import nest_asyncio - N√£o √© necess√°rio para este padr√£o de webhook
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import google.generativeai as genai
import gspread
from google.oauth2.service_account import Credentials

# Inicializa Flask
app_flask = Flask(__name__)

# Vari√°vel global para a aplica√ß√£o do Telegram
app_telegram = None 

# ======== VERIFICA√á√ÉO DE VARI√ÅVEIS =========
print("üîç Verificando vari√°veis de ambiente...")

TELEGRAM_TOKEN = os.getenv("TOKEN_TELEGRAM")
if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TOKEN_TELEGRAM ausente ou n√£o dispon√≠vel. Verifique as vari√°veis de ambiente do Render!")

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise RuntimeError("‚ùå GEMINI_API_KEY ausente!")

GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS")
if not GOOGLE_CREDENTIALS_JSON:
    raise RuntimeError("‚ùå GOOGLE_CREDENTIALS ausente!")

# ======== CONEX√ÉO COM GOOGLE ========
try:
    google_creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
    creds = Credentials.from_service_account_info(
        google_creds_dict,
        scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/calendar"]
    )
    gspread_client = gspread.authorize(creds)
    print("‚úÖ Conectado ao Google (Planilhas + Calend√°rio)")
except Exception as e:
    print(f"‚ùå Erro ao conectar ao Google: {e}")

# ======== CONFIGURAR GEMINI ========
try:
    genai.configure(api_key=GEMINI_API_KEY)
    modelo = genai.GenerativeModel("gemini-1.5-flash")
    print("‚úÖ Gemini configurado com sucesso.")
except Exception as e:
    print(f"‚ùå Erro ao configurar Gemini: {e}")
    modelo = None 


# ======== FUN√á√ÉO DE RESPOSTA ========
# Coroutine
async def responder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not modelo:
        await update.message.reply_text("‚ùå O servi√ßo de IA (Gemini) n√£o est√° configurado. Verifique a chave API.")
        return
        
    try:
        texto_usuario = update.message.text
        print(f"üì© Mensagem recebida do Telegram: {texto_usuario}")

        await update.message.reply_text("üí≠ Processando sua solicita√ß√£o, um momento...")

        # Gera resposta com Gemini em thread separada
        resposta = await asyncio.to_thread(modelo.generate_content, texto_usuario)

        if resposta and hasattr(resposta, "text"):
            texto_resposta = resposta.text
            print(f"ü§ñ Resposta gerada pelo Gemini: {texto_resposta}")
            await update.message.reply_text(texto_resposta)
        else:
            print("‚ö†Ô∏è Nenhum texto retornado pelo Gemini.")
            await update.message.reply_text("‚ö†Ô∏è N√£o consegui gerar uma resposta no momento.")
    except Exception as e:
        print(f"‚ùå Erro ao responder: {e}")
        await update.message.reply_text("‚ùå Ocorreu um erro ao processar sua mensagem.")

# ======== FLASK (WEBHOOK) ========
@app_flask.route("/", methods=["GET"])
def home():
    return "ü§ñ Bot do Telegram est√° ativo no Render!"

@app_flask.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
async def webhook(): # AGORA √â ASYNC!
    # A verifica√ß√£o do app_telegram √© crucial aqui.
    if not app_telegram:
        print("‚ùå Webhook chamado antes do app_telegram estar pronto.")
        return "Servidor em inicializa√ß√£o", 503 

    try:
        data = request.get_json(force=True) # force=True ajuda se o header Content-Type n√£o for perfeito
        if not data:
            print("‚ö†Ô∏è Nenhum dado recebido no webhook.")
            return "Sem conte√∫do", 400

        # process_update agora pode ser chamado diretamente (async)
        # O Flask moderno lida bem com fun√ß√µes de rota async
        await app_telegram.process_update(data)

        return "OK", 200
    except Exception as e:
        print(f"‚ùå Erro no webhook: {e}")
        return "Erro interno", 500

# ======== INICIALIZA√á√ÉO DO BOT (Ass√≠ncrona - Chamado apenas UMA VEZ) ========
async def inicializar_telegram_app():
    print("üöÄ Configurando aplica√ß√£o do Telegram...")
    global app_telegram
    
    # Cria a aplica√ß√£o do Telegram
    app_telegram = Application.builder().token(TELEGRAM_TOKEN).build()

    # Adiciona handlers
    app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, responder))
    
    # Define o webhook
    url_webhook = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook/{TELEGRAM_TOKEN}"
    await app_telegram.bot.set_webhook(url=url_webhook)
    print(f"üåê Webhook configurado em: {url_webhook}")
    print("‚úÖ Bot configurado e pronto para receber webhooks.")

# ======== IN√çCIO DO SERVIDOR (S√≠ncrono e Corrigido) ========
if __name__ == "__main__":
    
    # Executa a inicializa√ß√£o do PTB (configura o webhook) de forma s√≠ncrona
    # Isso garante que app_telegram seja definido.
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(inicializar_telegram_app())
    except Exception as e:
        print(f"‚ùå Falha cr√≠tica na inicializa√ß√£o do PTB: {e}")
        exit(1)
        
    # Usa a porta correta do Render
    PORT = int(os.environ.get("PORT", 8080))
    
    # Usa um servidor mais robusto para async/webhook (como Waitress ou Gunicorn + Uvicorn)
    # Mas para o Render Worker simples, o Flask padr√£o (com rota async) pode funcionar.
    print(f"üåç Servidor Flask iniciando na porta {PORT}...")
    
    # Nota: para suportar a fun√ß√£o 'async def webhook()', voc√™ deve usar um 
    # servidor WSGI/ASGI compat√≠vel com async. O Flask nativo (app_flask.run) √© s√≠ncrono,
    # o que pode ser a pr√≥xima falha. Vamos tentar com a biblioteca 'gevent' ou 'waitress'
    # para ser mais seguro, mas por enquanto, vamos manter o Flask run e torcer para o Render
    # lidar com isso ou mudar o `startCommand`.

    app_flask.run(host="0.0.0.0", port=PORT)
